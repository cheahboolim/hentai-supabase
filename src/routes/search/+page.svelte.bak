<!-- src/routes/search/+page.svelte -->
<script lang="ts">
  import { page } from '$app/stores';
  import { goto } from '$app/navigation';
  import ComicGrid from '$lib/components/ComicGrid.svelte';
  import Button from '$lib/components/ui/Button.svelte';
  import type { PageData } from './$types';

  export let data: PageData;

  // Extract values from data
  let query = data.query || '';
  let comics = data.comics || [];
  let totalPages = data.totalPages || 1;
  let currentPage = data.currentPage || 1;
  let showEmpty = data.showEmpty || false;
  let resultsCount = data.resultsCount || 0;

  // Update when data changes
  $: {
    query = data.query || '';
    comics = data.comics || [];
    totalPages = data.totalPages || 1;
    currentPage = data.currentPage || 1;
    showEmpty = data.showEmpty || false;
    resultsCount = data.resultsCount || 0;
  }

  // Generate pagination numbers with smart truncation
  function generatePagination(current: number, total: number): (number | string)[] {
    if (total <= 7) {
      return Array.from({ length: total }, (_, i) => i + 1);
    }

    const pages: (number | string)[] = [];
    
    // Always show first page
    pages.push(1);
    
    if (current > 4) {
      pages.push('...');
    }
    
    // Show pages around current
    const start = Math.max(2, current - 1);
    const end = Math.min(total - 1, current + 1);
    
    for (let i = start; i <= end; i++) {
      if (!pages.includes(i)) {
        pages.push(i);
      }
    }
    
    if (current < total - 3) {
      pages.push('...');
    }
    
    // Always show last page
    if (total > 1) {
      pages.push(total);
    }
    
    return pages;
  }

  $: paginationNumbers = generatePagination(currentPage, totalPages);

  function getPageHref(pageNum: number): string {
    const url = new URL($page.url);
    url.searchParams.set('page', pageNum.toString());
    return url.pathname + url.search;
  }
</script>

<svelte:head>
  <title>{query ? `Search: ${query}` : 'Search'} | Your Comic Site</title>
  <meta name="description" content={query ? `Search results for "${query}"` : 'Search for comics'} />
</svelte:head>

<main class="container mx-auto px-4 py-12">
  {#if showEmpty}
    <div class="text-center">
      <h1 class="text-3xl font-bold mb-4">Search</h1>
      <p class="text-muted-foreground">Please enter a search term to find comics.</p>
    </div>
  {:else}
    <div class="mb-6">
      <h1 class="text-3xl font-bold mb-2">
        Search results for: <span class="text-pink-500">"{query}"</span>
      </h1>
      <p class="text-muted-foreground">
        Found {resultsCount} result{resultsCount !== 1 ? 's' : ''}
      </p>
    </div>

    {#if comics.length === 0}
      <div class="text-center py-12">
        <p class="text-muted-foreground text-lg mb-4">
          No comics found matching your search.
        </p>
        <p class="text-sm text-muted-foreground">
          Try adjusting your search terms or browse our collection.
        </p>
      </div>
    {:else}
      <ComicGrid {comics} />

      <!-- Pagination -->
      {#if totalPages > 1}
        <nav class="mt-10" aria-label="Search results pagination">
          <div class="flex flex-wrap gap-2 justify-center items-center">
            <!-- Previous button -->
            {#if currentPage > 1}
              <a 
                href={getPageHref(currentPage - 1)}
                class="inline-flex items-center"
                aria-label="Go to previous page"
              >
                <Button variant="outline" size="sm">
                  ← Previous
                </Button>
              </a>
            {/if}

            <!-- Page numbers -->
            {#each paginationNumbers as pageNum}
              {#if pageNum === '...'}
                <span class="px-2 text-muted-foreground">…</span>
              {:else}
                <a 
                  href={getPageHref(pageNum)}
                  aria-label="Go to page {pageNum}"
                  aria-current={pageNum === currentPage ? 'page' : undefined}
                >
                  <Button
                    variant={pageNum === currentPage ? 'default' : 'outline'}
                    size="sm"
                    class="min-w-[40px] bg-white text-black hover:bg-gray-200 dark:bg-white dark:text-black"
                  >
                    {pageNum}
                  </Button>
                </a>
              {/if}
            {/each}

            <!-- Next button -->
            {#if currentPage < totalPages}
              <a 
                href={getPageHref(currentPage + 1)}
                class="inline-flex items-center"
                aria-label="Go to next page"
              >
                <Button variant="outline" size="sm">
                  Next →
                </Button>
              </a>
            {/if}
          </div>

          <!-- Page info -->
          <p class="text-center text-sm text-muted-foreground mt-4">
            Page {currentPage} of {totalPages}
          </p>
        </nav>
      {/if}
    {/if}
  {/if}
</main>