/* eslint-disable prettier/prettier */
// src/routes/sitemap-read-pages/[page].xml/+server.ts
import { error } from '@sveltejs/kit';
import { createClient } from '@supabase/supabase-js';
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';

// Define types for better type safety
interface PageData {
	manga_id: string;
	page_number: number;
	manga: {
		slug: string;
	} | null;
}

export const GET = async ({ params }) => {
	try {
		// Validate environment variables
		if (!PUBLIC_SUPABASE_URL || !PUBLIC_SUPABASE_ANON_KEY) {
			console.error('Missing Supabase environment variables');
			throw error(500, 'Database configuration error');
		}

		// Create Supabase client inside the function
		const supabase = createClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY);

		const PAGE_SIZE = 50000;
		const page = parseInt(params.page);

		if (isNaN(page) || page < 1) {
			throw error(400, 'Invalid sitemap page number');
		}

		const from = (page - 1) * PAGE_SIZE;
		const to = from + PAGE_SIZE - 1;

		const { data, error: supabaseError }: { data: PageData[] | null; error: any } = await supabase
			.from('pages')
			.select('manga_id, page_number, manga(slug)')
			.order('id', { ascending: true })
			.range(from, to);

		if (supabaseError) {
			console.error('Supabase error:', supabaseError);
			throw error(500, 'Database query failed');
		}

		if (!data || data.length === 0) {
			throw error(404, 'No pages found for this sitemap page');
		}

		const urls = data
			.filter((row): row is PageData & { manga: { slug: string } } => 
				row.manga !== null && typeof row.manga.slug === 'string'
			)
			.map((row) => {
				const slug = row.manga.slug;
				const pageNum = row.page_number;
				return `https://susmanga.com/comic/${slug}/read?page=${pageNum}`;
			});

		if (urls.length === 0) {
			throw error(404, 'No valid pages found');
		}

		const xml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${urls
	.map(
		(url) => `	<url>
		<loc>${url}</loc>
	</url>`
	)
	.join('\n')}
</urlset>`;

		return new Response(xml, {
			headers: {
				'Content-Type': 'application/xml',
				'Cache-Control': 'public, max-age=86400' // Cache for 24 hours
			}
		});

	} catch (err: any) {
		console.error('Sitemap generation error:', err);
		
		// Re-throw SvelteKit errors
		if (err?.status) {
			throw err;
		}
		
		// Handle unexpected errors
		throw error(500, 'Failed to generate sitemap');
	}
};