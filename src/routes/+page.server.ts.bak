import type { PageServerLoad } from './$types'

export const load: PageServerLoad = async ({ url, locals }) => {
	const { supabase } = locals

	const page = Math.max(1, parseInt(url.searchParams.get('page') || '1', 10))
	const PAGE_SIZE = 10
	const from = (page - 1) * PAGE_SIZE
	const to = from + PAGE_SIZE - 1

	const {
		data: manga,
		error: mangaError,
		count
	} = await supabase
		.from('manga')
		.select('id, title, feature_image_url', { count: 'exact' })
		.order('created_at', { ascending: false })
		.range(from, to)

	if (mangaError || !manga) {
		console.error('Error fetching manga:', mangaError)
		return {
			comics: [],
			page,
			totalPages: 0,
			supabase
		}
	}

	const ids = manga.map((m) => m.id)
	const { data: slugs, error: slugError } = await supabase
		.from('slug_map')
		.select('slug, manga_id')
		.in('manga_id', ids)

	if (slugError || !slugs) {
		console.error('Error fetching slugs:', slugError)
		return {
			comics: [],
			page,
			totalPages: 0,
			supabase
		}
	}

	const comics = manga.map((item) => ({
		id: item.id,
		title: item.title,
		slug: slugs.find((s) => s.manga_id === item.id)?.slug ?? '',
		featureImage: item.feature_image_url
	}))

	return {
		comics,
		page,
		totalPages: Math.ceil((count ?? 0) / PAGE_SIZE),
		supabase
	}
}
